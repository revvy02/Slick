"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[522],{24741:function(e){e.exports=JSON.parse('{"functions":[{"name":"_tryHistory","desc":"Attempts to add the old state to the history depending on the depth and returns true if successful","params":[{"name":"oldState","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","private":true,"source":{"line":28,"path":"src/Store.lua"}},{"name":"_trimHistory","desc":"Attempts to trim the history of the store depending on depth and current history and returns true if successful","params":[],"returns":[],"function_type":"method","private":true,"source":{"line":43,"path":"src/Store.lua"}},{"name":"_findChangedSignal","desc":"Attempts to find a changed signal for a key and generate it if generate is true","params":[{"name":"key","desc":"","lua_type":"any"},{"name":"generate","desc":"","lua_type":"bool"}],"returns":[],"function_type":"method","private":true,"source":{"line":65,"path":"src/Store.lua"}},{"name":"_findReducedSignal","desc":"Attempts to find a reduced signal for a key and its reducer and generate it if generate is true","params":[{"name":"key","desc":"","lua_type":"any"},{"name":"reducer","desc":"","lua_type":"string"},{"name":"generate","desc":"","lua_type":"bool"}],"returns":[],"function_type":"method","private":true,"source":{"line":85,"path":"src/Store.lua"}},{"name":"new","desc":"Creates a new Store object","params":[],"returns":[],"function_type":"static","source":{"line":114,"path":"src/Store.lua"}},{"name":"is","desc":"Returns whether or not the passed argument is a store object","params":[{"name":"obj","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"bool"}],"function_type":"static","source":{"line":140,"path":"src/Store.lua"}},{"name":"setDepth","desc":"Sets how much history is tracked and removes any excess if the history size exceeds the depth","params":[{"name":"depth","desc":"","lua_type":"number"}],"returns":[],"function_type":"method","source":{"line":149,"path":"src/Store.lua"}},{"name":"getDepth","desc":"Gets the depth of the store","params":[],"returns":[{"desc":"","lua_type":"number"}],"function_type":"method","source":{"line":161,"path":"src/Store.lua"}},{"name":"getHistory","desc":"Gets the history of the store as a table","params":[],"returns":[{"desc":"","lua_type":"table"}],"function_type":"method","source":{"line":170,"path":"src/Store.lua"}},{"name":"rawset","desc":"Sets the state key to the value without firing any events (should be used to initialize the store)","params":[{"name":"key","desc":"","lua_type":"any"},{"name":"value","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":180,"path":"src/Store.lua"}},{"name":"rawsetState","desc":"Sets the state of the store without firing any events (should be used to initialize the store)","params":[{"name":"state","desc":"","lua_type":"table"}],"returns":[],"function_type":"method","source":{"line":189,"path":"src/Store.lua"}},{"name":"setReducers","desc":"Sets the reducers for the store","params":[{"name":"reducers","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"nil"}],"function_type":"method","source":{"line":199,"path":"src/Store.lua"}},{"name":"get","desc":"Gets the value of the key in the store","params":[{"name":"key","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":208,"path":"src/Store.lua"}},{"name":"getState","desc":"Returns the state of the store","params":[],"returns":[{"desc":"","lua_type":"table"}],"function_type":"method","source":{"line":217,"path":"src/Store.lua"}},{"name":"dispatch","desc":"Dispatches args to the reducer for a key","params":[{"name":"key","desc":"","lua_type":"any"},{"name":"reducer","desc":"","lua_type":"string"},{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":228,"path":"src/Store.lua"}},{"name":"getReducedSignal","desc":"Returns a reduced signal that will be fired if that reducer is used on the key","params":[{"name":"key","desc":"","lua_type":"any"},{"name":"reducer","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Signal"}],"function_type":"method","source":{"line":271,"path":"src/Store.lua"}},{"name":"getChangedSignal","desc":"Returns a signal that will be fired if the passed key value is changed","params":[{"name":"key","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Signal"}],"function_type":"method","source":{"line":281,"path":"src/Store.lua"}},{"name":"destroy","desc":"Cleans up the store object and sets destroyed field to true","params":[],"returns":[],"function_type":"method","source":{"line":289,"path":"src/Store.lua"}}],"properties":[],"types":[],"name":"Store","desc":"Store class that holds many values that can be changed by a set of reducers","source":{"line":18,"path":"src/Store.lua"}}')}}]);
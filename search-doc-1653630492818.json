[{"title":"Keeper","type":0,"sectionRef":"#","url":"api/Keeper","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Keeper","url":"api/Keeper#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Keeper","url":"api/Keeper#new","content":"&lt;/&gt; Keeper.new() → Keeper Creates a new Keeper object  "},{"title":"is​","type":1,"pageTitle":"Keeper","url":"api/Keeper#is","content":"&lt;/&gt; Keeper.is(obj: any) → bool Checks whether or not the passed argument is a Keeper instance or not  "},{"title":"getCard​","type":1,"pageTitle":"Keeper","url":"api/Keeper#getCard","content":"&lt;/&gt; Keeper:getCard(key: any) → Card | nil Gets the card from the key  "},{"title":"createCard​","type":1,"pageTitle":"Keeper","url":"api/Keeper#createCard","content":"&lt;/&gt; Keeper:createCard( key: any, value: any ) → Card Creates the card and fires keyAdded or throws if it exists  "},{"title":"removeCard​","type":1,"pageTitle":"Keeper","url":"api/Keeper#removeCard","content":"&lt;/&gt; Keeper:removeCard(key: any) → Card Removes the key and fires keyRemoved or throws if it doesn't exist  "},{"title":"destroy​","type":1,"pageTitle":"Keeper","url":"api/Keeper#destroy","content":"&lt;/&gt; Keeper:destroy() → () Prepares keeper for garbage collection "},{"title":"Connection","type":0,"sectionRef":"#","url":"api/Connection","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Connection","url":"api/Connection#functions","content":" "},{"title":"is​","type":1,"pageTitle":"Connection","url":"api/Connection#is","content":"&lt;/&gt; Connection.is(obj: any) → bool Returns whether or not the passed argument is a connection or not  "},{"title":"disconnect​","type":1,"pageTitle":"Connection","url":"api/Connection#disconnect","content":"&lt;/&gt; Connection:disconnect() → () Disconnects the connection from the parent signal and sets connected to false  "},{"title":"destroy​","type":1,"pageTitle":"Connection","url":"api/Connection#destroy","content":"&lt;/&gt; Connection:destroy() → () Alias for disconnect but sets destroyed field to true "},{"title":"Card","type":0,"sectionRef":"#","url":"api/Card","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Card","url":"api/Card#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Card","url":"api/Card#new","content":"&lt;/&gt; Card.new(initial: any) → Card Creates a new Card object  "},{"title":"is​","type":1,"pageTitle":"Card","url":"api/Card#is","content":"&lt;/&gt; Card.is(obj: any) → bool Checks whether or not the passed arg is a card  "},{"title":"setDepth​","type":1,"pageTitle":"Card","url":"api/Card#setDepth","content":"&lt;/&gt; Card:setDepth(depth: number) → () Sets how much history is tracked and removes any excess if the history size exceeds the depth  "},{"title":"getDepth​","type":1,"pageTitle":"Card","url":"api/Card#getDepth","content":"&lt;/&gt; Card:getDepth() → () Gets the depth of the card  "},{"title":"getHistory​","type":1,"pageTitle":"Card","url":"api/Card#getHistory","content":"&lt;/&gt; Card:getHistory() → () Gets the history of the card depending on the card's depth  "},{"title":"getReducedSignal​","type":1,"pageTitle":"Card","url":"api/Card#getReducedSignal","content":"&lt;/&gt; Card:getReducedSignal(reducer: string) → Signal Gets the signal that will be fired for a reducer if it's dispatched  "},{"title":"getChangedSignal​","type":1,"pageTitle":"Card","url":"api/Card#getChangedSignal","content":"&lt;/&gt; Card:getChangedSignal() → Signal Gets the signal that will be fired if the value changes  "},{"title":"setReducers​","type":1,"pageTitle":"Card","url":"api/Card#setReducers","content":"&lt;/&gt; Card:setReducers(reducers: table) → () Sets the reducers for the key (should typically only be set once when the Key is instantiated)  "},{"title":"rawset​","type":1,"pageTitle":"Card","url":"api/Card#rawset","content":"&lt;/&gt; Card:rawset(value: any) → () Sets the value without triggering any signals or history updates  "},{"title":"getValue​","type":1,"pageTitle":"Card","url":"api/Card#getValue","content":"&lt;/&gt; Card:getValue() → any Gets the current value  "},{"title":"dispatch​","type":1,"pageTitle":"Card","url":"api/Card#dispatch","content":"&lt;/&gt; Card:dispatch( reducer: string, ...: any ) → () Dispatches the current reducer to update the value while firing the changed and appropriate reduced signal  "},{"title":"destroy​","type":1,"pageTitle":"Card","url":"api/Card#destroy","content":"&lt;/&gt; Card:destroy() → () Prepares card for garbage collection "},{"title":"Signal","type":0,"sectionRef":"#","url":"api/Signal","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Signal","url":"api/Signal#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Signal","url":"api/Signal#new","content":"&lt;/&gt; Signal.new() → Signal Constructs a new signal object.  "},{"title":"is​","type":1,"pageTitle":"Signal","url":"api/Signal#is","content":"&lt;/&gt; Signal.is(obj: any) → boolean Returns whether the passed argument is a signal  "},{"title":"enableQueueing​","type":1,"pageTitle":"Signal","url":"api/Signal#enableQueueing","content":"&lt;/&gt; Signal:enableQueueing() → () Enables argumenting queuing from fire calls when there are no connections and sets queueing to true  "},{"title":"disableQueueing​","type":1,"pageTitle":"Signal","url":"api/Signal#disableQueueing","content":"&lt;/&gt; Signal:disableQueueing() → () Disables argumenting queuing from fire calls when there are no connections and sets queueing to false  "},{"title":"enableDeferred​","type":1,"pageTitle":"Signal","url":"api/Signal#enableDeferred","content":"&lt;/&gt; Signal:enableDeferred() → () Enables deferred signaling and sets deferred to true  "},{"title":"disableDeferred​","type":1,"pageTitle":"Signal","url":"api/Signal#disableDeferred","content":"&lt;/&gt; Signal:disableDeferred() → () Disables deferred signaling and sets deferred to false  "},{"title":"setActivatedCallback​","type":1,"pageTitle":"Signal","url":"api/Signal#setActivatedCallback","content":"&lt;/&gt; Signal:setActivatedCallback(fn: function) → () Sets the callback that is called when a connection is made from when there are no connections (an activated state enters).  "},{"title":"setDeactivatedCallback​","type":1,"pageTitle":"Signal","url":"api/Signal#setDeactivatedCallback","content":"&lt;/&gt; Signal:setDeactivatedCallback(fn: function) → () Sets the callback that is called when the last active connection is disconnected (a deactivated state enters).  "},{"title":"fire​","type":1,"pageTitle":"Signal","url":"api/Signal#fire","content":"&lt;/&gt; Signal:fire(...: any) → () Fires the signal with the optional passed arguments. This method makes optimizations by recycling threads in cases where connections don't yield if deferred is false.  "},{"title":"flush​","type":1,"pageTitle":"Signal","url":"api/Signal#flush","content":"&lt;/&gt; Signal:flush() → () Empties any queued arguments that may have been added when fire was called with no connections.  "},{"title":"wait​","type":1,"pageTitle":"Signal","url":"api/Signal#wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Signal:wait() → any Yields the current thread until the signal is fired and returns what was fired  "},{"title":"promise​","type":1,"pageTitle":"Signal","url":"api/Signal#promise","content":"&lt;/&gt; Signal:promise() → Promise Returns a promise that resolves the next time the signal is fired  "},{"title":"connect​","type":1,"pageTitle":"Signal","url":"api/Signal#connect","content":"&lt;/&gt; Signal:connect(fn: function) → Connection Connects a handler function to the signal so that it can be called when it's fired.  "},{"title":"disconnectAll​","type":1,"pageTitle":"Signal","url":"api/Signal#disconnectAll","content":"&lt;/&gt; Signal:disconnectAll() → () Disconnects all connections  "},{"title":"destroy​","type":1,"pageTitle":"Signal","url":"api/Signal#destroy","content":"&lt;/&gt; Signal:destroy() → () Alias for disconnectAll but sets destroyed field to true "},{"title":"Store","type":0,"sectionRef":"#","url":"api/Store","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Store","url":"api/Store#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Store","url":"api/Store#new","content":"&lt;/&gt; Store.new(initial?: table) → Store Creates a new Store object  "},{"title":"is​","type":1,"pageTitle":"Store","url":"api/Store#is","content":"&lt;/&gt; Store.is(obj: any) → bool Returns whether or not the passed argument is a store object  "},{"title":"setDepth​","type":1,"pageTitle":"Store","url":"api/Store#setDepth","content":"&lt;/&gt; Store:setDepth(depth: number) → () Sets how much history is tracked and removes any excess if the history size exceeds the depth  "},{"title":"getDepth​","type":1,"pageTitle":"Store","url":"api/Store#getDepth","content":"&lt;/&gt; Store:getDepth() → number Gets the depth of the store  "},{"title":"getHistory​","type":1,"pageTitle":"Store","url":"api/Store#getHistory","content":"&lt;/&gt; Store:getHistory() → table Gets the history of the store as a table  "},{"title":"rawset​","type":1,"pageTitle":"Store","url":"api/Store#rawset","content":"&lt;/&gt; Store:rawset( key: any, value: any ) → () Sets the state key to the value without firing any events (should be used to initialize the store)  "},{"title":"rawsetState​","type":1,"pageTitle":"Store","url":"api/Store#rawsetState","content":"&lt;/&gt; Store:rawsetState(state: table) → () Sets the state of the store without firing any events (should be used to initialize the store)  "},{"title":"setReducers​","type":1,"pageTitle":"Store","url":"api/Store#setReducers","content":"&lt;/&gt; Store:setReducers(reducers: table) → () Sets the reducers for the store  "},{"title":"getValue​","type":1,"pageTitle":"Store","url":"api/Store#getValue","content":"&lt;/&gt; Store:getValue(key: any) → () Gets the value of the key in the store  "},{"title":"getState​","type":1,"pageTitle":"Store","url":"api/Store#getState","content":"&lt;/&gt; Store:getState() → table Returns the state of the store  "},{"title":"dispatch​","type":1,"pageTitle":"Store","url":"api/Store#dispatch","content":"&lt;/&gt; Store:dispatch( key: any, reducer: string, ...: any ) → () Dispatches args to the reducer for a key  "},{"title":"getReducedSignal​","type":1,"pageTitle":"Store","url":"api/Store#getReducedSignal","content":"&lt;/&gt; Store:getReducedSignal( key: any, reducer: any ) → Signal Returns a reduced signal that will be fired if that reducer is used on the key  "},{"title":"getChangedSignal​","type":1,"pageTitle":"Store","url":"api/Store#getChangedSignal","content":"&lt;/&gt; Store:getChangedSignal(key: any) → Signal Returns a signal that will be fired if the passed key value is changed  "},{"title":"destroy​","type":1,"pageTitle":"Store","url":"api/Store#destroy","content":"&lt;/&gt; Store:destroy() → () Cleans up the store object and sets destroyed field to true "}]